//#!/usr/bin/env node

/**
 * Module dependencies.
 */

var debug = require('debug')('mobnius-kes-node');
var http = require('http');

var join = require('path').join;
var conf = require('node-config')(join(__dirname, '../'));
var init = require('./init');
var logjs = require('../modules/log');
var args = require("args-parser")(process.argv);
var server = null;
var port = normalizePort(args.port);
var utils = require('../modules/utils');

init(function() {  // инициализация схемы БД

    var app = require('../index');
    var vPath = utils.getVirtualDirPath();

    server = http.createServer(app);

    var io = require('socket.io')(server, {
        path: vPath + '/socket.io'
    });
    io.origins('*:*');
    app.set('io', io);
    var socket = require('../modules/socket/main.js').on(io);
    server.listen(port);
    logjs.log('server start http://localhost:' + port);
    server.on('error', onError);
    server.on('listening', onListening);
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}